package com.ongres.string_prep.core;

public class Parser {

  public static boolean unassignedCodePoints(int codepoint) {
    return 
  #foreach( $unassignedCodePoints in $stringPrep.getUnassignedCodePoints() ) #if( $unassignedCodePoints.get(0) == $unassignedCodePoints.get(1) ) codepoint == $unassignedCodePoints.get(0) #else codepoint >= $unassignedCodePoints.get(0) && codepoint <= $unassignedCodePoints.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean mapToNothing(int codepoint) {
    return 
  #foreach( $mapToNothing in $stringPrep.getMapToNothing() )  codepoint == $mapToNothing #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static int[] mapUsedWithNFKC(int codepoint) {
  #set ( $mapNFKC = $stringPrep.getMapUsedWithNFKC() ) 
  switch(codepoint) {
#foreach( $mapUsedWithNFKC in $mapNFKC.keySet() ) 
    case( $mapUsedWithNFKC ):
#set ( $valuesNFKC = $mapNFKC.get($mapUsedWithNFKC) )
    return new int[$valuesNFKC.size()]{#foreach($value in $valuesNFKC) $value #if($foreach.hasNext),#end#end};
#end
    }
  }

  public static int[] mapUsedWithNoNormalization(int codepoint) {
  #set ( $mapNormal = $stringPrep.getMapUsedWithNoNormalization() ) 
  switch(codepoint) {
#foreach( $mapUsedWithNoNormalization in $mapNormal.keySet() ) 
    case( $mapUsedWithNoNormalization ):
#set ( $valuesNormal = $mapNormal.get($mapUsedWithNoNormalization) )
    return new int[$valuesNormal.size()]{#foreach($value in $valuesNormal) $value #if($foreach.hasNext),#end#end};
#end
    }
  }

  public static boolean prohibitionAsciiSpace(int codepoint) {
    return 
  #foreach( $asciiSpace in $stringPrep.getAsciiSpace() )  codepoint == $asciiSpace #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

    public static boolean prohibitionNonAsciiSpace(int codepoint) {
    return 
  #foreach( $nonAsciiSpace in $stringPrep.getNonAsciiSpace() )  codepoint == $nonAsciiSpace #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean prohibitionAsciiControl(int codepoint) {
    return 
  #foreach( $asciiControl in $stringPrep.getAsciiControl() ) #if( $asciiControl.get(0) == $asciiControl.get(1) ) codepoint == $asciiControl.get(0) #else codepoint >= $asciiControl.get(0) && codepoint <= $asciiControl.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean prohibitionNonAsciiControl(int codepoint) {
    return 
  #foreach( $nonAsciiControl in $stringPrep.getNonAsciiControl() ) #if( $nonAsciiControl.get(0) == $nonAsciiControl.get(1) ) codepoint == $nonAsciiControl.get(0) #else codepoint >= $nonAsciiControl.get(0) && codepoint <= $nonAsciiControl.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean prohibitionprivateUse(int codepoint) {
    return 
  #foreach( $privateUse in $stringPrep.getPrivateUse() ) #if( $privateUse.get(0) == $privateUse.get(1) ) codepoint == $privateUse.get(0) #else codepoint >= $privateUse.get(0) && codepoint <= $privateUse.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean prohibitionNonCharacterCodePoints(int codepoint) {
    return 
  #foreach( $nonCharacterCodePoints in $stringPrep.getNonCharacterCodePoints() ) #if( $nonCharacterCodePoints.get(0) == $nonCharacterCodePoints.get(1) ) codepoint == $nonCharacterCodePoints.get(0) #else codepoint >= $nonCharacterCodePoints.get(0) && codepoint <= $nonCharacterCodePoints.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean prohibitionSurrogateCodes(int codepoint) {
    return 
  #foreach( $nonCharacterCodePoints in $stringPrep.getNonCharacterCodePoints() ) #if( $nonCharacterCodePoints.get(0) == $nonCharacterCodePoints.get(1) ) codepoint == $nonCharacterCodePoints.get(0) #else codepoint >= $nonCharacterCodePoints.get(0) && codepoint <= $nonCharacterCodePoints.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean prohibitionInappropriatePlainText(int codepoint) {
    return 
  #foreach( $inappropriatePlainText in $stringPrep.getInappropriatePlainText() ) #if( $inappropriatePlainText.get(0) == $inappropriatePlainText.get(1) ) codepoint == $inappropriatePlainText.get(0) #else codepoint >= $inappropriatePlainText.get(0) && codepoint <= $inappropriatePlainText.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean prohibitionInappropriateCanonicalRepresentation(int codepoint) {
    return 
  #foreach( $inappropriateCanonicalRepresentation in $stringPrep.getInappropriateCanonicalRepresentation() ) #if( $inappropriateCanonicalRepresentation.get(0) == $inappropriateCanonicalRepresentation.get(1) ) codepoint == $inappropriateCanonicalRepresentation.get(0) #else codepoint >= $inappropriateCanonicalRepresentation.get(0) && codepoint <= $inappropriateCanonicalRepresentation.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean prohibitionChangeDisplayProperties(int codepoint) {
    return 
  #foreach( $changeDisplayProperties in $stringPrep.getChangeDisplayProperties() ) #if( $changeDisplayProperties.get(0) == $changeDisplayProperties.get(1) ) codepoint == $changeDisplayProperties.get(0) #else codepoint >= $changeDisplayProperties.get(0) && codepoint <= $changeDisplayProperties.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }

  public static boolean prohibitionTaggingCharacters(int codepoint) {
    return 
  #foreach( $taggingCharacters in $stringPrep.getTaggingCharacters() ) #if( $taggingCharacters.get(0) == $taggingCharacters.get(1) ) codepoint == $taggingCharacters.get(0) #else codepoint >= $taggingCharacters.get(0) && codepoint <= $taggingCharacters.get(1) #end #if( $foreach.hasNext )||
#end
  #end
  
    ;
  }
}